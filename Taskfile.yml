---
# https://taskfile.dev

version: '3'

set:
  - nounset
  - errexit
  - pipefail

includes:
  bash:
    taskfile: ./goat/Task/bash/Taskfile.yml
    internal: true
    optional: true
    vars:
      IMAGE_NAME: "{{.IMAGE_NAME}}"
      PROJECT_SLUG: "{{.PROJECT_SLUG}}"
      PYTHON_VERSION: "{{.PYTHON_VERSION}}"

vars:
  IMAGE_NAME: seiso/goat
  PROJECT_SLUG: goat
  PYTHON_VERSION: 3.11

silent: true

tasks:
  lock:
    internal: true
    sources:
      - Pipfile
    generates:
      - Pipfile.lock
    cmds:
      - pipenv lock

  init:
    deps: [lock]
    sources:
      - Pipfile.lock
    cmds:
      - git submodule init
      - pipenv install --deploy --ignore-pipfile --dev
      - pipenv run pre-commit install

  lint:
    cmds:
      - task: bash:lint
        vars:
          INPUT_AUTO_FIX: false
          INPUT_EXCLUDE: '^/{{.PROJECT_SLUG}}/goat/.*'
          INPUT_LOG_LEVEL: "{{.CLI_ARGS}}"

  test:
    env:
      INPUT_DISABLE_MYPY: true
      INPUT_EXCLUDE: '^/{{.PROJECT_SLUG}}/goat/*'
    cmds:
      - echo "Baaaaaaaaaaah! (Running the goat)"
      - |
        if [[ "${GITHUB_ACTIONS}" == "true" ]]; then
          repo="${GITHUB_WORKSPACE}"
          docker run --rm --env-file <(env | grep ^GITHUB_) \
                          --env-file <(env | grep ^INPUT_) \
                          -v "${repo}:/goat" \
                          -v "${HOME}:${HOME}" \
                          seiso/goat:latest
        else
          docker run --rm --env-file <(env | grep ^GITHUB_) \
                          --env-file <(env | grep ^INPUT_) \
                          -v "{{.ROOT_DIR}}:/goat" \
                          seiso/goat:latest
        fi

  build:
    cmds:
      - task: bash:build

  clean:
    cmds:
      - task: bash:clean

  release:
    cmds:
      - task: bash:release

  publish:
    cmds:
      - task: bash:publish
        vars:
          TAGS: 'latest'

  update:
    cmds:
      - task: bash:update
      - task: pre-commit-update

  pre-commit-update:
    env:
      ACTION: "{{.CLI_ARGS}}"
    cmds:
      - pipenv run pre-commit autoupdate --bleeding-edge --freeze --jobs 4
      - |
        if [[ "${ACTION}" == "commit" ]]; then
          git add -A
          git commit -m "Bump pre-commit revision"
        elif [[ "${ACTION:=empty}" != "empty" ]]; then
          echo "Unsupported action of ${ACTION} provided"
          exit 230
        fi
