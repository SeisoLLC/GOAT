# https://taskfile.dev

version: '3'

includes:
  base: 
    taskfile: ../Taskfile.yaml
    internal: true

vars:
  IMAGE_NAME: null
  VERSION: null
  PYTHON_VERSION: null
  REPO_TAGS: null
  TAG_COMMIT_HASH: null
  COMMIT_HASH: null
  COMMIT_HASH_SHORT: null

tasks:
  lint:
    preconditions:
      - sh: test `git status -s | wc -w` = "0"
        msg: "There are untracked files, please commit before linting."
    cmds:
      - docker run --rm -v "${PWD}:/goat" -e RUN_LOCAL=true seiso/goat:latest

  test:
    preconditions:
      - sh: test `git symbolic-ref -q HEAD`
        msg: "In detached HEAD state."
    cmds:
      - pipenv run pytest tests

  build:
    vars:
      BUILD_VERSION:
        sh: |
          pipenv run python -c '
          version_string = f"v{{.VERSION}}"
          repo_tags = []
          {{range $tag := .REPO_TAGS | splitLines -}}
          repo_tags.append("{{$tag}}")
          {{end}}
          if (version_string in repo_tags and "{{.TAG_COMMIT_HASH}}" == "{{.COMMIT_HASH}}"):
              build_version = "{{.VERSION}}"
          else:
              build_version = f"{{.VERSION}}-{{.COMMIT_HASH_SHORT}}"
          print(build_version)'
    cmds:
      - docker buildx build --tag {{.IMAGE_NAME}}:latest --tag {{.IMAGE_NAME}}:{{.BUILD_VERSION}} .

  reformat:
    cmds:
      - >
        docker run --rm -v "${PWD}:/goat" -e RUN_LOCAL=true
        --entrypoint isort seiso/goat:latest .
        --settings-file /action/lib/.automation/.isort.cfg
      - >
        docker run --rm -v "${PWD}:/goat" -e RUN_LOCAL=true
        --entrypoint black seiso/goat:latest .

  update:
    cmds:
      - >
        docker run  --rm -v "${PWD}:/usr/src/app" -w /usr/src/app python:{{.PYTHON_VERSION}} /bin/bash
        -c "python3 -m pip install --upgrade pipenv &>/dev/null && pipenv update"

  release-calver:
    preconditions:
      - sh: test `git status -s | wc -w` = "0"
        msg: "There are untracked files, please commit before creating a release."
    vars:
      REPO_TAGS:
        sh: git tag -l
      DATE_INFO: '{{now | date "2006.01"}}'
      RELEASE_VERSION:
        sh: |
          pipenv run python -c '
          import re
          pattern = re.compile(r"v2[0-1][0-9]{2}.(0[0-9]|1[0-2]).[0-9]{2}")
          repo_tags = []
          {{range $tag := .REPO_TAGS | splitLines -}}
          repo_tags.append("{{$tag}}")
          {{end}}
          for tag in reversed(repo_tags):
              if pattern.fullmatch(tag):
                  latest_release = tag
                  break
              else:
                  latest_release = None
          if latest_release and "{{.DATE_INFO}}" == latest_release[1:8]:
              increment = str(int(latest_release[9:]) + 1).zfill(2)
          else:
              increment = "01"
          new_version = f"{{.DATE_INFO}}.{increment}"
          print(new_version)'
    cmds:
      - pipenv run bumpversion --config-file setup.cfg --new-version {{.RELEASE_VERSION}} unusedpart

  release-semver:
    preconditions:
      - sh: test `git status -s | wc -w` = "0"
        msg: "There are untracked files, please commit before creating a release."
    vars:
      RELEASE_TYPE: '{{.CLI_ARGS}}'
    cmds:
      - pipenv run bumpversion --config-file setup.cfg {{.RELEASE_TYPE}}

  publish:
    deps: [build]
    cmds:
      - docker push --all-tags {{.IMAGE_NAME}}

  clean:
    cmds:
      - task: base:clean
      - |
        pipenv run python -c '
        from pathlib import Path
        CWD = Path(".").absolute()
        cleanup_list = []
        cleanup_list.extend(list(CWD.glob("**/.mypy_cache")))
        cleanup_list.extend(list(CWD.glob("**/*.pyc")))
        cleanup_list.extend(list(CWD.glob("**/.pytest-cache")))
        for item in cleanup_list:
            if item.is_dir():
                shutil.rmtree(item)
            elif item.is_file():
                item.unlink()'
